<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ninject.Extensions.Wf</name>
    </assembly>
    <members>
        <member name="T:Ninject.Extensions.Wf.NinjectBookmarkInfo">
            <summary>
            Wraps the <see cref="P:Ninject.Extensions.Wf.NinjectBookmarkInfo.BookmarkInfo"/>.
            </summary>
        </member>
        <member name="M:Ninject.Extensions.Wf.NinjectBookmarkInfo.#ctor(System.String,System.String,Ninject.Extensions.Wf.NinjectBookmarkScopeInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Extensions.Wf.NinjectBookmarkInfo"/> class.
            </summary>
            <param name="bookmarkName">Name of the bookmark.</param>
            <param name="ownerDisplayName">Display name of the owner.</param>
            <param name="bookmarkScopeInfo">The bookmark scope info.</param>
        </member>
        <member name="M:Ninject.Extensions.Wf.NinjectBookmarkInfo.#ctor(System.Activities.Hosting.BookmarkInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Extensions.Wf.NinjectBookmarkInfo"/> class.
            </summary>
            <param name="bookmarkInfo">The bookmark info.</param>
        </member>
        <member name="P:Ninject.Extensions.Wf.NinjectBookmarkInfo.BookmarkName">
            <summary>Gets the name associated with the <see cref="T:System.Activities.Bookmark"/>.</summary><returns>The name associated with the <see cref="T:System.Activities.Bookmark"/>.</returns>
        </member>
        <member name="P:Ninject.Extensions.Wf.NinjectBookmarkInfo.OwnerDisplayName">
            <summary>Gets an optional friendly name that is used for debugging, validation, exception handling, and tracking.</summary><returns>A friendly name that is used for debugging, validation, exception handling, and tracking.</returns>
        </member>
        <member name="P:Ninject.Extensions.Wf.NinjectBookmarkInfo.ScopeInfo">
            <summary>Gets the <see cref="T:System.Activities.Hosting.BookmarkScopeInfo"/> of the <see cref="T:System.Activities.BookmarkScope"/> associated with the <see cref="T:System.Activities.Bookmark"/>.</summary><returns>The bookmark scope information of the <see cref="T:System.Activities.BookmarkScope"/> associated with the <see cref="T:System.Activities.Bookmark"/>.</returns>
        </member>
        <member name="P:Ninject.Extensions.Wf.NinjectBookmarkInfo.BookmarkInfo">
            <summary>
            Gets the underlying bookmark info.
            </summary>
            <value>The bookmark info.</value>
        </member>
        <member name="T:Ninject.Extensions.Wf.NinjectBookmarkScopeInfo">
            <summary>
            Wraps the <see cref="P:Ninject.Extensions.Wf.NinjectBookmarkScopeInfo.BookmarkScopeInfo"/>.
            </summary>
        </member>
        <member name="M:Ninject.Extensions.Wf.NinjectBookmarkScopeInfo.#ctor(System.Boolean,System.Guid,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Extensions.Wf.NinjectBookmarkScopeInfo"/> class.
            </summary>
            <param name="isInitialized">if set to <c>true</c> the bookmark scope is initialized.</param>
            <param name="id">The id.</param>
            <param name="temporaryId">The temporary id.</param>
        </member>
        <member name="M:Ninject.Extensions.Wf.NinjectBookmarkScopeInfo.#ctor(System.Activities.Hosting.BookmarkScopeInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Extensions.Wf.NinjectBookmarkScopeInfo"/> class.
            </summary>
            <param name="bookmarkScopeInfo">The bookmark scope info.</param>
        </member>
        <member name="P:Ninject.Extensions.Wf.NinjectBookmarkScopeInfo.IsInitialized">
            <summary>Gets a value that indicates whether the <see cref="T:System.Activities.BookmarkScope"/> has been initialized.</summary><returns>true if the <see cref="T:System.Activities.BookmarkScope"/> has been initialized; otherwise false.</returns>
        </member>
        <member name="P:Ninject.Extensions.Wf.NinjectBookmarkScopeInfo.Id">
            <summary>Gets the unique identifier for the <see cref="T:System.Activities.BookmarkScope"/>.</summary><returns>The unique identifier for the <see cref="T:System.Activities.BookmarkScope"/>.</returns>
        </member>
        <member name="P:Ninject.Extensions.Wf.NinjectBookmarkScopeInfo.TemporaryId">
            <summary>Gets a value that uniquely identifies the <see cref="T:System.Activities.BookmarkScope"/> when the <see cref="T:System.Activities.BookmarkScope"/> is in an uninitialized state.</summary><returns>A value that uniquely identifies the <see cref="T:System.Activities.BookmarkScope"/> when the <see cref="T:System.Activities.BookmarkScope"/> is in an uninitialized state.</returns>
        </member>
        <member name="P:Ninject.Extensions.Wf.NinjectBookmarkScopeInfo.BookmarkScopeInfo">
            <summary>
            Gets the underlying bookmark scope info.
            </summary>
            <value>The bookmark scope info.</value>
        </member>
        <member name="T:Ninject.Extensions.Wf.NinjectWorkflowApplicationAbortedEventArgs">
            <summary>
            Wraps the <see cref="T:System.Activities.WorkflowApplicationAbortedEventArgs"/>.
            </summary>
        </member>
        <member name="T:Ninject.Extensions.Wf.NinjectWorkflowApplicationEventArgs">
            <summary>
            Wraps the <see cref="T:System.Activities.WorkflowApplicationEventArgs"/>.
            </summary>
        </member>
        <member name="M:Ninject.Extensions.Wf.NinjectWorkflowApplicationEventArgs.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Extensions.Wf.NinjectWorkflowApplicationEventArgs"/> class.
            </summary>
            <param name="instanceId">The instance id.</param>
        </member>
        <member name="M:Ninject.Extensions.Wf.NinjectWorkflowApplicationEventArgs.#ctor(System.Activities.WorkflowApplicationEventArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Extensions.Wf.NinjectWorkflowApplicationEventArgs"/> class.
            </summary>
            <param name="workflowApplicationArguments">The <see cref="T:System.Activities.WorkflowApplicationEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Ninject.Extensions.Wf.NinjectWorkflowApplicationEventArgs.Arguments">
            <summary>
            Gets the underlying <see cref="T:System.Activities.WorkflowApplicationEventArgs"/>.
            </summary>
            <value>The <see cref="T:System.Activities.WorkflowApplicationEventArgs"/>.</value>
        </member>
        <member name="P:Ninject.Extensions.Wf.NinjectWorkflowApplicationEventArgs.InstanceId">
            <summary>The unique identifier of the workflow instance.</summary><returns>A unique identifier.</returns>
        </member>
        <member name="M:Ninject.Extensions.Wf.NinjectWorkflowApplicationAbortedEventArgs.#ctor(System.Guid,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Extensions.Wf.NinjectWorkflowApplicationAbortedEventArgs"/> class.
            </summary>
            <param name="instanceId">The instance id.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:Ninject.Extensions.Wf.NinjectWorkflowApplicationAbortedEventArgs.#ctor(System.Activities.WorkflowApplicationAbortedEventArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Extensions.Wf.NinjectWorkflowApplicationAbortedEventArgs"/> class.
            </summary>
            <param name="workflowApplicationAbortedEventArgs">The <see cref="T:System.Activities.WorkflowApplicationAbortedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Ninject.Extensions.Wf.NinjectWorkflowApplicationAbortedEventArgs.Reason">
            <summary>Gets the exception that provides information about why the workflow instance was aborted</summary><returns>The exception that provides information about why the workflow instance was aborted.</returns>
        </member>
        <member name="P:Ninject.Extensions.Wf.NinjectWorkflowApplicationAbortedEventArgs.Arguments">
            <summary>
            Gets the underlying <see cref="T:System.Activities.WorkflowApplicationAbortedEventArgs"/>.
            </summary>
            <value>The <see cref="T:System.Activities.WorkflowApplicationAbortedEventArgs"/>.</value>
        </member>
        <member name="T:Ninject.Extensions.Wf.NinjectWorkflowApplicationCompletedEventArgs">
            <summary>
            Wraps the <see cref="T:System.Activities.WorkflowApplicationCompletedEventArgs"/>.
            </summary>
        </member>
        <member name="M:Ninject.Extensions.Wf.NinjectWorkflowApplicationCompletedEventArgs.#ctor(System.Guid,System.Activities.ActivityInstanceState,System.Exception,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Extensions.Wf.NinjectWorkflowApplicationCompletedEventArgs"/> class.
            </summary>
            <param name="instanceId">The instance id.</param>
            <param name="completionState">State of the completion.</param>
            <param name="terminationException">The termination exception.</param>
            <param name="outputs">The outputs.</param>
        </member>
        <member name="M:Ninject.Extensions.Wf.NinjectWorkflowApplicationCompletedEventArgs.#ctor(System.Activities.WorkflowApplicationCompletedEventArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Extensions.Wf.NinjectWorkflowApplicationCompletedEventArgs"/> class.
            </summary>
            <param name="workflowApplicationCompletedEventArgs">The <see cref="T:System.Activities.WorkflowApplicationCompletedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Ninject.Extensions.Wf.NinjectWorkflowApplicationCompletedEventArgs.Arguments">
            <summary>
            Gets the underlying <see cref="T:System.Activities.WorkflowApplicationCompletedEventArgs"/>.
            </summary>
            <value>The <see cref="T:System.Activities.WorkflowApplicationCompletedEventArgs"/>.</value>
        </member>
        <member name="P:Ninject.Extensions.Wf.NinjectWorkflowApplicationCompletedEventArgs.CompletionState">
            <summary>Gets the completion state of the workflow instance, which indicates whether the workflow instance completed successfully, was canceled, or faulted.</summary><returns>The completion state of the workflow instance, which indicates whether the workflow instance completed successfully, was canceled, or faulted.</returns>
        </member>
        <member name="P:Ninject.Extensions.Wf.NinjectWorkflowApplicationCompletedEventArgs.Outputs">
            <summary>Gets a dictionary that contains the values of <see cref="T:System.Activities.OutArgument"/>s of the workflow instance’s root activity, keyed by argument name.</summary><returns>A dictionary that contains the values of <see cref="T:System.Activities.OutArgument"/>s of the workflow instance’s root activity, keyed by argument name.</returns>
        </member>
        <member name="P:Ninject.Extensions.Wf.NinjectWorkflowApplicationCompletedEventArgs.TerminationException">
            <summary>Gets the exception associated with the termination of the workflow instance.</summary><returns>The exception associated with the termination of the workflow instance.</returns>
        </member>
        <member name="T:Ninject.Extensions.Wf.NinjectWorkflowApplicationIdleEventArgs">
            <summary>
            Wraps the <see cref="T:System.Activities.WorkflowApplicationIdleEventArgs"/>.
            </summary>
        </member>
        <member name="M:Ninject.Extensions.Wf.NinjectWorkflowApplicationIdleEventArgs.#ctor(System.Guid,System.Collections.ObjectModel.ReadOnlyCollection{Ninject.Extensions.Wf.NinjectBookmarkInfo})">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Extensions.Wf.NinjectWorkflowApplicationIdleEventArgs"/> class.
            </summary>
            <param name="instanceId">The instance id.</param>
            <param name="bookmarks">The bookmarks.</param>
        </member>
        <member name="M:Ninject.Extensions.Wf.NinjectWorkflowApplicationIdleEventArgs.#ctor(System.Activities.WorkflowApplicationIdleEventArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Extensions.Wf.NinjectWorkflowApplicationIdleEventArgs"/> class.
            </summary>
            <param name="workflowApplicationIdleEventArgs">The <see cref="T:System.Activities.WorkflowApplicationIdleEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Ninject.Extensions.Wf.NinjectWorkflowApplicationIdleEventArgs.Bookmarks">
            <summary>Gets the read-only collection of bookmarks for the workflow instance.</summary><returns>A read-only collection of bookmarks.</returns>
        </member>
        <member name="P:Ninject.Extensions.Wf.NinjectWorkflowApplicationIdleEventArgs.Arguments">
            <summary>
            Gets the underlying <see cref="T:System.Activities.WorkflowApplicationIdleEventArgs"/>.
            </summary>
            <value>The <see cref="T:System.Activities.WorkflowApplicationIdleEventArgs"/>.</value>
        </member>
        <member name="T:Ninject.Extensions.Wf.NinjectWorkflowApplicationUnhandledExceptionEventArgs">
            <summary>
            Event arguments which wraps <see cref="T:System.Activities.WorkflowApplicationUnhandledExceptionEventArgs"/>
            </summary>
        </member>
        <member name="M:Ninject.Extensions.Wf.NinjectWorkflowApplicationUnhandledExceptionEventArgs.#ctor(System.Guid,System.Exception,System.Activities.Activity,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Extensions.Wf.NinjectWorkflowApplicationUnhandledExceptionEventArgs"/> class.
            </summary>
            <param name="instanceId">The instance id.</param>
            <param name="unhandledException">The unhandled exception.</param>
            <param name="exceptionSource">The exception source.</param>
            <param name="exceptionSourceInstanceId">The exception source instance id.</param>
        </member>
        <member name="M:Ninject.Extensions.Wf.NinjectWorkflowApplicationUnhandledExceptionEventArgs.#ctor(System.Activities.WorkflowApplicationUnhandledExceptionEventArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Extensions.Wf.NinjectWorkflowApplicationUnhandledExceptionEventArgs"/> class.
            </summary>
            <param name="workflowApplicationUnhandledExceptionEventArgs">The <see cref="T:System.Activities.WorkflowApplicationUnhandledExceptionEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Ninject.Extensions.Wf.NinjectWorkflowApplicationUnhandledExceptionEventArgs.UnhandledException">
            <summary>Gets the <see cref="T:System.Exception"/> that was unhandled by the workflow instance.</summary><returns>The <see cref="T:System.Exception"/> that was unhandled by the workflow instance.</returns>
        </member>
        <member name="P:Ninject.Extensions.Wf.NinjectWorkflowApplicationUnhandledExceptionEventArgs.ExceptionSource">
            <summary>Gets the activity that is the source of the unhandled exception.</summary><returns>An activity.</returns>
        </member>
        <member name="P:Ninject.Extensions.Wf.NinjectWorkflowApplicationUnhandledExceptionEventArgs.ExceptionSourceInstanceId">
            <summary>Gets the unique identifier of the activity instance that is the source of the unhandled exception.</summary><returns>An identifier of the activity instance that is the source of the unhandled exception.</returns>
        </member>
        <member name="P:Ninject.Extensions.Wf.NinjectWorkflowApplicationUnhandledExceptionEventArgs.Arguments">
            <summary>
            Gets the underlying <see cref="T:System.Activities.WorkflowApplicationUnhandledExceptionEventArgs"/>.
            </summary>
            <value>The <see cref="T:System.Activities.WorkflowApplicationUnhandledExceptionEventArgs"/>.</value>
        </member>
        <member name="T:Ninject.Extensions.Wf.Extensions.BindingWhenSyntaxExtensions">
            <summary>
            Contains extension methods for the <see cref="T:Ninject.Syntax.IBindingWhenSyntax`1"/>
            </summary>
        </member>
        <member name="M:Ninject.Extensions.Wf.Extensions.BindingWhenSyntaxExtensions.WhenInjectedIntoActivity``1(Ninject.Syntax.IBindingWhenSyntax{``0},System.Func{System.Activities.Activity,System.Boolean})">
            <summary>
            Indicates that the binding should be used only for requests that support the specified condition.
            </summary>
            <typeparam name="T">The type used in the binding.</typeparam>
            <param name="whenSyntax">The when syntax.</param>
            <param name="condition">The condition.</param>
            <returns>The syntax</returns>
        </member>
        <member name="M:Ninject.Extensions.Wf.Extensions.BindingWhenSyntaxExtensions.WhenInjectedIntoActivity``1(Ninject.Syntax.IBindingWhenSyntax{``0},System.Type)">
            <summary>
            Indicates that the binding should be used only for injections on the specified activity type.
            </summary>
            <typeparam name="T">The type used in the binding.</typeparam>
            <param name="whenSyntax">The when syntax.</param>
            <param name="parent">The type.</param>
            <returns>The syntax.</returns>
        </member>
        <member name="T:Ninject.Extensions.Wf.Extensions.ExtensionResolver">
            <summary>
            Base class which provides extension on kernel resolving ability.
            </summary>
        </member>
        <member name="T:Ninject.Extensions.Wf.Extensions.IResolveExtensions">
            <summary>
            The implementor must be able to resolve extensions
            </summary>
        </member>
        <member name="M:Ninject.Extensions.Wf.Extensions.IResolveExtensions.AddSingletonExtension``1">
            <summary>
            Adds an extension with a singleton scope to the underlying workflow.
            </summary>
            <remarks>This is independent from the scope defined on the ninject
            kernel. The scoping of the 
            <see cref="T:System.Activities.Hosting.WorkflowInstanceExtensionManager"/> is applied.</remarks>
            <typeparam name="TExtension">The extension to add.</typeparam>
        </member>
        <member name="M:Ninject.Extensions.Wf.Extensions.IResolveExtensions.AddTransientExtension``1">
            <summary>
            Adds an extension with a transient scope to the underlying workflow.
            </summary>
            <remarks>This is independent from the scope defined on the ninject
            kernel. The scoping of the 
            <see cref="T:System.Activities.Hosting.WorkflowInstanceExtensionManager"/> is applied.</remarks>
            <typeparam name="TExtension">The extension to add.</typeparam>
        </member>
        <member name="M:Ninject.Extensions.Wf.Extensions.ExtensionResolver.#ctor(Ninject.IKernel)">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Extensions.Wf.Extensions.ExtensionResolver"/> class.
            </summary>
            <param name="kernel">The kernel.</param>
        </member>
        <member name="M:Ninject.Extensions.Wf.Extensions.ExtensionResolver.AddSingletonExtension``1">
            <summary>
            Adds an extension with a singleton scope to the underlying workflow.
            </summary>
            <typeparam name="TExtension">The extension to add.</typeparam>
            <remarks>This is independent from the scope defined on the ninject
            kernel. The scoping of the
            <see cref="T:System.Activities.Hosting.WorkflowInstanceExtensionManager"/> is applied.</remarks>
        </member>
        <member name="M:Ninject.Extensions.Wf.Extensions.ExtensionResolver.AddTransientExtension``1">
            <summary>
            Adds an extension with a transient scope to the underlying workflow.
            </summary>
            <typeparam name="TExtension">The extension to add.</typeparam>
            <remarks>This is independent from the scope defined on the ninject
            kernel. The scoping of the
            <see cref="T:System.Activities.Hosting.WorkflowInstanceExtensionManager"/> is applied.</remarks>
        </member>
        <member name="P:Ninject.Extensions.Wf.Extensions.ExtensionResolver.Kernel">
            <summary>
            Gets the kernel.
            </summary>
        </member>
        <member name="P:Ninject.Extensions.Wf.Extensions.ExtensionResolver.Extensions">
            <summary>
            Gets the extensions. The inheritor must return the used extension manager.
            </summary>
            <value>The extensions.</value>
        </member>
        <member name="T:Ninject.Extensions.Wf.Extensions.IDictionaryExtensions">
            <summary>
            Contains extensions for dictionaries.
            </summary>
        </member>
        <member name="M:Ninject.Extensions.Wf.Extensions.IDictionaryExtensions.ToObject``1(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Turns a given dictionary into an object by assigning the values of
            the keys in the dictionary to the public properties of the provided
            type.
            </summary>
            <typeparam name="T">The type to be used for deserialization.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:Ninject.Extensions.Wf.Extensions.IDictionaryExtensions.KeysAreNotEqual(System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo})">
            <summary>
            Determines whether the keys presented in the dictionary are matching to the public properties.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="publicProperties">The public properties.</param>
            <returns><see langword="true"/> if they are matching; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Ninject.Extensions.Wf.Extensions.IDictionaryExtensions.SizeIsNotEqual(System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Reflection.PropertyInfo})">
            <summary>
            Determines whether the sizes are equal.
            </summary>
            <param name="dictionary">The dictionary</param>
            <param name="publicProperties">The public properties</param>
            <returns>true if the sizes are equal; otherwise false.</returns>
        </member>
        <member name="T:Ninject.Extensions.Wf.Extensions.NinjectWorkflowApplicationExtensions">
            <summary>
            Contains extension methods for the <see cref="T:Ninject.Extensions.Wf.IWorkflowApplication"/>.
            </summary>
        </member>
        <member name="M:Ninject.Extensions.Wf.Extensions.NinjectWorkflowApplicationExtensions.Initialize``1(Ninject.Extensions.Wf.IWorkflowApplication,System.Activities.Activity,``0)">
            <summary>
            Initializes the specified application.
            </summary>
            <typeparam name="TInput">The type of the input.</typeparam>
            <param name="application">The application.</param>
            <param name="workflowDefinition">The workflow definition.</param>
            <param name="inputs">The inputs.</param>
        </member>
        <member name="T:Ninject.Extensions.Wf.Extensions.NinjectWorkflowInvokerExtensions">
            <summary>
            Contains extension methods for the <see cref="T:Ninject.Extensions.Wf.IWorkflowInvoker"/>.
            </summary>
        </member>
        <member name="M:Ninject.Extensions.Wf.Extensions.NinjectWorkflowInvokerExtensions.InvokeAsync``1(Ninject.Extensions.Wf.IWorkflowInvoker,``0)">
            <summary>
            Invokes a workflow asynchronously using the specified input object
            as input parameters.
            </summary>
            <typeparam name="TInput">The type of the input.</typeparam>
            <param name="invoker">The invoker.</param>
            <param name="inputs">The input object which is turned into a
            dictionary by <see cref="M:Ninject.Extensions.Wf.Extensions.ObjectExtensions.ToDict(System.Object)"/>.</param>
        </member>
        <member name="M:Ninject.Extensions.Wf.Extensions.NinjectWorkflowInvokerExtensions.InvokeAsync``1(Ninject.Extensions.Wf.IWorkflowInvoker,``0,System.TimeSpan)">
            <summary>
            Invokes a workflow asynchronously using the specified input object
            as input parameters and the specified time-out interval.
            </summary>
            <typeparam name="TInput">The type of the input.</typeparam>
            <param name="invoker">The invoker.</param>
            <param name="inputs">The input object which is turned into a
            dictionary by <see cref="M:Ninject.Extensions.Wf.Extensions.ObjectExtensions.ToDict(System.Object)"/>.</param>
            <param name="timeout">The interval in which the workflow must
            complete before it is aborted and a System.TimeoutException is
            thrown.</param>
        </member>
        <member name="M:Ninject.Extensions.Wf.Extensions.NinjectWorkflowInvokerExtensions.InvokeAsync``1(Ninject.Extensions.Wf.IWorkflowInvoker,``0,System.Object)">
            <summary>
            Invokes a workflow asynchronously using the specified input object
            as input parameters and a unique identifier.
            </summary>
            <typeparam name="TInput">The type of the input.</typeparam>
            <param name="invoker">The invoker.</param>
            <param name="inputs">The input object which is turned into a
            dictionary by <see cref="M:Ninject.Extensions.Wf.Extensions.ObjectExtensions.ToDict(System.Object)"/>.</param>
            <param name="userState">A user-provided object used to distinguish
            this particular asynchronous invoke operation from other current
            asynchronous invoke operations.</param>
        </member>
        <member name="M:Ninject.Extensions.Wf.Extensions.NinjectWorkflowInvokerExtensions.InvokeAsync``1(Ninject.Extensions.Wf.IWorkflowInvoker,``0,System.TimeSpan,System.Object)">
            <summary>
            Invokes a workflow asynchronously using the specified input object
            as input parameters, the specified time-out interval, and a unique
            identifier.
            </summary>
            <typeparam name="TInput">The type of the input.</typeparam>
            <param name="invoker">The invoker.</param>
            <param name="inputs">The input object which is turned into a
            dictionary by <see cref="M:Ninject.Extensions.Wf.Extensions.ObjectExtensions.ToDict(System.Object)"/>.</param>
            <param name="timeout">The interval in which the workflow must
            complete before it is aborted and a System.TimeoutException is
            thrown.</param>
            <param name="userState">A user-provided object used to distinguish
            this particular asynchronous invoke operation from other current
            asynchronous invoke operations.</param>
        </member>
        <member name="T:Ninject.Extensions.Wf.Extensions.ObjectExtensions">
            <summary>
            Contains extension methods for System.Object.
            </summary>
        </member>
        <member name="M:Ninject.Extensions.Wf.Extensions.ObjectExtensions.ToDict(System.Object)">
            <summary>
            Turns the specified object into a dictionary by using the property key as dictionary key.
            </summary>
            <param name="value">The object to be serialized.</param>
            <returns>A dictionary representing the object.</returns>
        </member>
        <member name="T:Ninject.Extensions.Wf.Extensions.RequestExtensions">
            <summary>
            Contains extension methods for the <see cref="T:Ninject.Activation.IRequest"/>.
            </summary>
        </member>
        <member name="M:Ninject.Extensions.Wf.Extensions.RequestExtensions.GetRootActivityParameter(Ninject.Activation.IRequest)">
            <summary>
            Gets the root activity parameter on the <see cref="T:Ninject.Activation.IRequest"/> if any.
            </summary>
            <param name="request">The request.</param>
            <returns>The root activity parameter or <see langword="null"/>.</returns>
        </member>
        <member name="M:Ninject.Extensions.Wf.Extensions.RequestExtensions.HasRootActivityParameter(Ninject.Activation.IRequest)">
            <summary>
            Determines whether the request contains a <see cref="T:Ninject.Extensions.Wf.Parameters.RootActivityParameter"/>.
            </summary>
            <param name="request">The request.</param>
            <returns>
            <c>true</c> if the request contains a <see cref="T:Ninject.Extensions.Wf.Parameters.RootActivityParameter"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Ninject.Extensions.Wf.Extensions.WorkflowInvokerExtensions">
            <summary>
            Provides extension methods for the workflow invoker.
            </summary>
        </member>
        <member name="M:Ninject.Extensions.Wf.Extensions.WorkflowInvokerExtensions.Invoke``2(System.Activities.WorkflowInvoker,``0)">
            <summary>
            Invokes the specified workflow invoker.
            </summary>
            <typeparam name="TInput">The type of the input.</typeparam>
            <typeparam name="TOutput">The type of the output.</typeparam>
            <param name="workflowInvoker">The workflow invoker.</param>
            <param name="inputs">The inputs which is serialized into a dictionary..</param>
            <returns>The output deserialized.</returns>
        </member>
        <member name="T:Ninject.Extensions.Wf.FuncActivityInjectorExtension">
            <summary>
            An injector extension which allows to use delegates.
            </summary>
        </member>
        <member name="T:Ninject.Extensions.Wf.IActivityInjectorExtension">
            <summary>
            An activity injector extension allows to hook into the injection
            process. Registered activity injector extensions are processed after the
            the internal extensions.
            </summary>
        </member>
        <member name="M:Ninject.Extensions.Wf.IActivityInjectorExtension.CanProcess(System.Activities.Activity,System.Activities.Activity)">
            <summary>
            Determines whether this instance can process the specified activity.
            </summary>
            <param name="activity">The activity which is a possible candidate for processing.</param>
            <param name="root">The root activity as defined by the workflow definition.</param>
            <returns>
            <c>true</c> if this instance can process the specified activity; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Ninject.Extensions.Wf.IActivityInjectorExtension.Process(System.Activities.Activity,System.Activities.Activity)">
            <summary>
            Processes the specified activity.
            </summary>
            <param name="activity">The activity to be processed.</param>
            <param name="root">The root activity as defined by the workflow definition.</param>
        </member>
        <member name="M:Ninject.Extensions.Wf.FuncActivityInjectorExtension.#ctor(System.Action{System.Activities.Activity,System.Activities.Activity})">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Extensions.Wf.FuncActivityInjectorExtension"/> class.
            </summary>
            <param name="processAction">The process action.</param>
        </member>
        <member name="M:Ninject.Extensions.Wf.FuncActivityInjectorExtension.#ctor(System.Func{System.Activities.Activity,System.Activities.Activity,System.Boolean},System.Action{System.Activities.Activity,System.Activities.Activity})">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Extensions.Wf.FuncActivityInjectorExtension"/> class.
            </summary>
            <param name="canProcess">The can process action.</param>
            <param name="processAction">The process action.</param>
        </member>
        <member name="M:Ninject.Extensions.Wf.FuncActivityInjectorExtension.CanProcess(System.Activities.Activity,System.Activities.Activity)">
            <summary>
            Determines whether this instance can process the specified activity.
            </summary>
            <param name="activity">The activity.</param>
            <param name="root"></param>
            <returns>
            <c>true</c> if this instance can process the specified activity; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Ninject.Extensions.Wf.FuncActivityInjectorExtension.Process(System.Activities.Activity,System.Activities.Activity)">
            <summary>
            Processes the specified activity.
            </summary>
            <param name="activity">The activity.</param>
            <param name="root"></param>
        </member>
        <member name="T:Ninject.Extensions.Wf.IInjectOnKernelExtension">
            <summary>
            Special marker interface which differentiates the inject on kernel
            extension from the other extensions.
            </summary>
        </member>
        <member name="T:Ninject.Extensions.Wf.InjectOnKernelExtension">
            <summary>
            Special internal extension which does build up the activities by using kernel inject.
            </summary>
        </member>
        <member name="M:Ninject.Extensions.Wf.InjectOnKernelExtension.#ctor(Ninject.IKernel)">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Extensions.Wf.InjectOnKernelExtension"/> class.
            </summary>
            <param name="kernel">The kernel.</param>
        </member>
        <member name="T:Ninject.Extensions.Wf.ActivityDependencyInjection">
            <summary>
            Extension which resolves all activities recursively and builds them up
            with the provided kernel.
            </summary>
        </member>
        <member name="F:Ninject.Extensions.Wf.ActivityDependencyInjection.activityInjector">
            <summary>
            Enables to extension to inject dependencies into activities
            </summary>
        </member>
        <member name="M:Ninject.Extensions.Wf.ActivityDependencyInjection.#ctor(Ninject.Extensions.Wf.IActivityInjector)">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Extensions.Wf.ActivityDependencyInjection"/> class.
            </summary>
            <param name="activityInjector">The activity injector.</param>
        </member>
        <member name="M:Ninject.Extensions.Wf.ActivityDependencyInjection.GetAdditionalExtensions">
            <summary>
            When implemented, returns any additional extensions the implementing class requires.
            </summary>
            <returns>
            A collection of additional workflow extensions.
            </returns>
        </member>
        <member name="M:Ninject.Extensions.Wf.ActivityDependencyInjection.SetInstance(System.Activities.Hosting.WorkflowInstanceProxy)">
            <summary>
            Sets the specified target <see cref="T:System.Activities.Hosting.WorkflowInstanceProxy"/>.
            </summary>
            <param name="instance">The target workflow instance to set.</param>
        </member>
        <member name="T:Ninject.Extensions.Wf.ActivityInjector">
            <summary>
            The activity injector is responsible for calling injector extensions for each resolved activity.
            </summary>
        </member>
        <member name="T:Ninject.Extensions.Wf.IActivityInjector">
            <summary>
            The activity injector is responsible for processing all activities
            starting from the given root activity.
            </summary>
        </member>
        <member name="M:Ninject.Extensions.Wf.IActivityInjector.Inject(System.Activities.Activity)">
            <summary>
            Begins the injection process starting from the root activity.
            </summary>
            <param name="root">The root activity.</param>
        </member>
        <member name="M:Ninject.Extensions.Wf.ActivityInjector.#ctor(Ninject.Extensions.Wf.IActivityResolver,System.Collections.Generic.IEnumerable{Ninject.Extensions.Wf.IActivityInjectorExtension})">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Extensions.Wf.ActivityInjector"/> class.
            </summary>
            <param name="activityResolver">The activity resolver.</param>
            <param name="extensions">The extensions.</param>
        </member>
        <member name="M:Ninject.Extensions.Wf.ActivityInjector.Inject(System.Activities.Activity)">
            <summary>
            Begins the injection process starting from the root activity.
            </summary>
            <param name="root">The root activity.</param>
        </member>
        <member name="T:Ninject.Extensions.Wf.ActivityResolver">
            <summary>
            Resolves the activity tree by using <see cref="T:System.Activities.WorkflowInspectionServices"/>
            </summary>
        </member>
        <member name="T:Ninject.Extensions.Wf.IActivityResolver">
            <summary>
            The implementor must take care of resolving all activities which are
            lying under a given root activity.
            </summary>
        </member>
        <member name="M:Ninject.Extensions.Wf.IActivityResolver.GetActivities(System.Activities.Activity)">
            <summary>
            Gets the activities which are under a given root activity.
            </summary>
            <param name="root">The root activity.</param>
            <returns>All activities under root.</returns>
        </member>
        <member name="M:Ninject.Extensions.Wf.ActivityResolver.GetActivities(System.Activities.Activity)">
            <summary>
            Gets the activities which are under a given root activity.
            </summary>
            <param name="root">The root activity.</param>
            <returns>All activities under root.</returns>
        </member>
        <member name="M:Ninject.Extensions.Wf.ActivityResolver.GetActivities(System.Activities.Activity,System.Collections.Generic.ICollection{System.Activities.Activity})">
            <summary>
            Gets the activities recursively.
            </summary>
            <param name="root">The root activity to start with.</param>
            <param name="collectedActivities">The collected activities.</param>
        </member>
        <member name="T:Ninject.Extensions.Wf.Modules.WfExtensionModule">
            <summary>
            This module loads all wf extension requirements into the kernel
            </summary>
        </member>
        <member name="M:Ninject.Extensions.Wf.Modules.WfExtensionModule.Load">
            <summary>
            Loads the module into the kernel.
            </summary>
        </member>
        <member name="T:Ninject.Extensions.Wf.Parameters.RootActivityParameter">
            <summary>
            Parameter which provides access to the root activity.
            </summary>
        </member>
        <member name="M:Ninject.Extensions.Wf.Parameters.RootActivityParameter.#ctor(System.Activities.Activity)">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Extensions.Wf.Parameters.RootActivityParameter"/> class.
            </summary>
            <param name="root">The root activity.</param>
        </member>
        <member name="P:Ninject.Extensions.Wf.Parameters.RootActivityParameter.Root">
            <summary>
            Gets the root activity of the current request.
            </summary>
        </member>
        <member name="T:Ninject.Extensions.Wf.IWorkflowApplication">
            <summary>
            Interface definition for the workflow application.
            </summary>
        </member>
        <member name="M:Ninject.Extensions.Wf.IWorkflowApplication.Initialize(System.Activities.Activity)">
            <summary>Creates a new instance of the <see cref="T:System.Activities.WorkflowApplication"/> class with the specified workflow definition.</summary><param name="workflowDefinition">The workflow definition.</param>
            <remarks>Adds the necessary extensions to build up workflows with ninject.</remarks>
        </member>
        <member name="M:Ninject.Extensions.Wf.IWorkflowApplication.Initialize(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Creates a new instance of the <see cref="T:System.Activities.WorkflowApplication"/> class that uses the specified workflow definition and argument values.</summary><param name="workflowDefinition">The workflow definition.</param><param name="inputs">The values for arguments defined on the root activity of the workflow definition.</param>
            <remarks>Adds the necessary extensions to build up workflows with ninject.</remarks>
        </member>
        <member name="M:Ninject.Extensions.Wf.IWorkflowApplication.Unload">
            <summary>Persists and unloads a workflow instance.</summary>
        </member>
        <member name="M:Ninject.Extensions.Wf.IWorkflowApplication.Unload(System.TimeSpan)">
            <summary>Persists and unloads a workflow instance using the specified time-out interval.</summary><param name="timeout">The interval in which the unload operation must complete before the operation is canceled and a <see cref="T:System.TimeoutException"/> is thrown.</param>
        </member>
        <member name="M:Ninject.Extensions.Wf.IWorkflowApplication.Terminate(System.String)">
            <summary>Terminates a workflow instance using the specified error message.</summary><param name="reason">The reason for terminating the workflow instance.</param>
        </member>
        <member name="M:Ninject.Extensions.Wf.IWorkflowApplication.Terminate(System.Exception)">
            <summary>Terminates a workflow instance using the specified exception.</summary><param name="reason">The reason for terminating the workflow instance.</param>
        </member>
        <member name="M:Ninject.Extensions.Wf.IWorkflowApplication.Terminate(System.String,System.TimeSpan)">
            <summary>Terminates a workflow instance using the specified error message and time-out interval.</summary><param name="reason">The reason for terminating the workflow instance.</param><param name="timeout">The interval in which the <see cref="M:System.Activities.WorkflowApplication.Terminate(System.String,System.TimeSpan)"/> operation must complete before the operation is canceled and a <see cref="T:System.TimeoutException"/> is thrown.</param>
        </member>
        <member name="M:Ninject.Extensions.Wf.IWorkflowApplication.Run">
            <summary>Begins or resumes the execution of a workflow instance.</summary>
        </member>
        <member name="M:Ninject.Extensions.Wf.IWorkflowApplication.Run(System.TimeSpan)">
            <summary>Begins or resumes the execution of a workflow instance using the specified time-out interval.</summary><param name="timeout">Call this method to initiate execution of a newly created workflow instance.The interval in which the run operation must complete before the operation is canceled and a <see cref="T:System.TimeoutException"/> is thrown.</param>
        </member>
        <member name="M:Ninject.Extensions.Wf.IWorkflowApplication.ResumeBookmark(System.String,System.Object)">
            <summary>Initiates an operation to resume the bookmark with the specified name, using the specified value. The bookmark to be resumed is previously created by an activity within the workflow instance.</summary><returns>The result of the bookmark resumption operation.</returns><param name="bookmarkName">The name of the bookmark to be resumed.</param><param name="value">An object passed as a parameter to the method that is invoked when the bookmark resumes.</param>
        </member>
        <member name="M:Ninject.Extensions.Wf.IWorkflowApplication.ResumeBookmark(System.Activities.Bookmark,System.Object)">
            <summary>Initiates an operation to resume the specified bookmark, using the specified value. The bookmark to be resumed is previously created by an activity within the workflow instance.</summary><returns>The result of the bookmark resumption operation.</returns><param name="bookmark">The bookmark to resume.</param><param name="value">An object passed as a parameter to the method that is invoked when the bookmark resumes.</param>
        </member>
        <member name="M:Ninject.Extensions.Wf.IWorkflowApplication.ResumeBookmark(System.String,System.Object,System.TimeSpan)">
            <summary>Initiates an operation to resume the bookmark with the specified name, using the specified value and time-out interval. The bookmark to be resumed is previously created by an activity within the workflow instance.</summary><returns>The result of the bookmark resumption operation.</returns><param name="bookmarkName">The name of the bookmark to be resumed.</param><param name="value">An object passed as a parameter to the method that is invoked when the bookmark resumes.</param><param name="timeout">The time interval during which the bookmark must be resumed.</param>
        </member>
        <member name="M:Ninject.Extensions.Wf.IWorkflowApplication.ResumeBookmark(System.Activities.Bookmark,System.Object,System.TimeSpan)">
            <summary>Initiates an operation to resume the specified bookmark, using the specified value and time-out interval. The bookmark to be resumed is previously created by an activity within the workflow instance.</summary><returns>The result of the bookmark resumption operation.</returns><param name="bookmark">The bookmark to resume.</param><param name="value">An object passed as a parameter to the method that is invoked when the bookmark resumes.</param><param name="timeout">The time interval during which the bookmark must be resumed.</param>
        </member>
        <member name="M:Ninject.Extensions.Wf.IWorkflowApplication.Persist">
            <summary>Persists a workflow instance to an instance store.</summary>
        </member>
        <member name="M:Ninject.Extensions.Wf.IWorkflowApplication.Persist(System.TimeSpan)">
            <summary>Persists a workflow instance to an instance store using the specified time-out interval.</summary><param name="timeout">The interval in which the persist operation must complete before the operation is canceled and a <see cref="T:System.TimeoutException"/> is thrown.</param>
        </member>
        <member name="M:Ninject.Extensions.Wf.IWorkflowApplication.LoadRunnableInstance">
            <summary>Loads a runnable workflow instance from the <see cref="P:System.Activities.WorkflowApplication.InstanceStore"/>.</summary>
        </member>
        <member name="M:Ninject.Extensions.Wf.IWorkflowApplication.LoadRunnableInstance(System.TimeSpan)">
            <summary>Loads a runnable workflow instance from the <see cref="P:System.Activities.WorkflowApplication.InstanceStore"/> using the specified time-out interval.</summary><param name="timeout">The interval in which the load operation must complete before the operation is canceled and a <see cref="T:System.TimeoutException"/> is thrown.</param>
        </member>
        <member name="M:Ninject.Extensions.Wf.IWorkflowApplication.Load(System.Guid)">
            <summary>Loads the specified workflow instance into memory from an instance store.</summary><param name="instanceId">A globally unique 128-bit identifier for the workflow instance.</param>
        </member>
        <member name="M:Ninject.Extensions.Wf.IWorkflowApplication.Load(System.Guid,System.TimeSpan)">
            <summary>Loads the specified workflow instance into memory from an instance store using the specified time-out interval.</summary><param name="instanceId">A globally unique 128-bit identifier for the workflow instance.</param><param name="timeout">The interval in which the load operation must complete before the load operation is canceled and a <see cref="T:System.TimeoutException"/> is thrown.</param>
        </member>
        <member name="M:Ninject.Extensions.Wf.IWorkflowApplication.GetBookmarks">
            <summary>Returns the collection of bookmarks for the workflow instance.</summary><returns>A read-only collection of bookmarks for the workflow instance.</returns>
        </member>
        <member name="M:Ninject.Extensions.Wf.IWorkflowApplication.GetBookmarks(System.TimeSpan)">
            <summary>Returns the collection of bookmarks for the workflow instance using the specified time-out interval.</summary><returns>A read-only collection of bookmarks for the workflow instance.</returns><param name="timeout">The interval in which this method must complete before the operation is canceled and a <see cref="T:System.TimeoutException"/> is thrown.</param>
        </member>
        <member name="M:Ninject.Extensions.Wf.IWorkflowApplication.EndUnload(System.IAsyncResult)">
            <summary>Waits for the pending asynchronous unload operation to complete.</summary><param name="result">The asynchronous unload operation.</param>
        </member>
        <member name="M:Ninject.Extensions.Wf.IWorkflowApplication.EndTerminate(System.IAsyncResult)">
            <summary>Waits for the pending asynchronous terminate operation to complete.</summary><param name="result">The asynchronous terminate operation.</param>
        </member>
        <member name="M:Ninject.Extensions.Wf.IWorkflowApplication.EndRun(System.IAsyncResult)">
            <summary>Waits for the pending asynchronous run operation to complete.</summary><param name="result">The asynchronous run operation.</param>
        </member>
        <member name="M:Ninject.Extensions.Wf.IWorkflowApplication.EndResumeBookmark(System.IAsyncResult)">
            <summary>Waits for a bookmark resume operation to complete.</summary><returns>One of the enumeration values that indicates the results of a bookmark resumption operation.</returns><param name="result">A reference to the asynchronous bookmark resume operation.</param>
        </member>
        <member name="M:Ninject.Extensions.Wf.IWorkflowApplication.EndPersist(System.IAsyncResult)">
            <summary>Waits for the pending asynchronous persist operation to complete.</summary><param name="result">The asynchronous persist operation.</param>
        </member>
        <member name="M:Ninject.Extensions.Wf.IWorkflowApplication.EndLoadRunnableInstance(System.IAsyncResult)">
            <summary>Waits for the asynchronous load runnable instance operation to complete.</summary><param name="result">A reference to the asynchronous load operation.</param>
        </member>
        <member name="M:Ninject.Extensions.Wf.IWorkflowApplication.EndLoad(System.IAsyncResult)">
            <summary>Waits for the pending asynchronous load operation to complete.</summary><param name="result">The asynchronous load operation.</param>
        </member>
        <member name="M:Ninject.Extensions.Wf.IWorkflowApplication.EndCancel(System.IAsyncResult)">
            <summary>Waits for the pending asynchronous cancel operation to complete.</summary><param name="result">The asynchronous cancel operation.</param>
        </member>
        <member name="M:Ninject.Extensions.Wf.IWorkflowApplication.Cancel">
            <summary>Cancels the workflow instance.</summary>
        </member>
        <member name="M:Ninject.Extensions.Wf.IWorkflowApplication.Cancel(System.TimeSpan)">
            <summary>Cancels the workflow instance using the specified time-out interval.</summary><param name="timeout">The interval in which the cancel operation must complete before the operation is canceled and a <see cref="T:System.TimeoutException"/> is thrown.</param>
        </member>
        <member name="M:Ninject.Extensions.Wf.IWorkflowApplication.BeginUnload(System.AsyncCallback,System.Object)">
            <summary>Persists and disposes a workflow instance asynchronously using the specified callback method and user-provided state.</summary><returns>A reference to the asynchronous <see cref="!:Overload:System.Activities.WorkflowApplication.BeginUnload"/> operation.</returns><param name="callback">The method to be called when the <see cref="!:Overload:System.Activities.WorkflowApplication.BeginUnload"/> operation has completed.</param><param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
        </member>
        <member name="M:Ninject.Extensions.Wf.IWorkflowApplication.BeginUnload(System.TimeSpan,System.AsyncCallback,System.Object)">
            <summary>Persists and disposes a workflow instance asynchronously using the specified time-out interval, callback method, and user-provided state.</summary><returns>A reference to the asynchronous <see cref="!:Overload:System.Activities.WorkflowApplication.BeginUnload"/> operation.</returns><param name="timeout">The interval in which the <see cref="!:Overload:System.Activities.WorkflowApplication.BeginTerminate"/> operation must complete before the operation is canceled and a <see cref="T:System.TimeoutException"/> is thrown.</param><param name="callback">The method to be called when the <see cref="!:Overload:System.Activities.WorkflowApplication.BeginUnload"/> operation has completed.</param><param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
        </member>
        <member name="M:Ninject.Extensions.Wf.IWorkflowApplication.BeginTerminate(System.String,System.AsyncCallback,System.Object)">
            <summary>Terminates a workflow instance asynchronously using the specified error message, callback method, and user-provided state.</summary><returns>A reference to the current <see cref="!:Overload:System.Activities.WorkflowApplication.BeginTerminate"/> operation.</returns><param name="reason">The reason for terminating the workflow instance.</param><param name="callback">The method to be called when the <see cref="!:Overload:System.Activities.WorkflowApplication.BeginTerminate"/> operation has completed.</param><param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
        </member>
        <member name="M:Ninject.Extensions.Wf.IWorkflowApplication.BeginTerminate(System.Exception,System.AsyncCallback,System.Object)">
            <summary>Terminates a workflow instance asynchronously using the specified exception, callback method, and user-provided state.</summary><returns>A reference to the current <see cref="!:Overload:System.Activities.WorkflowApplication.BeginTerminate"/> operation.</returns><param name="reason">The reason the workflow instance is terminated.</param><param name="callback">The method to be called when the <see cref="!:Overload:System.Activities.WorkflowApplication.BeginTerminate"/> operation has completed.</param><param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
        </member>
        <member name="M:Ninject.Extensions.Wf.IWorkflowApplication.BeginTerminate(System.String,System.TimeSpan,System.AsyncCallback,System.Object)">
            <summary>Terminates a workflow instance asynchronously using the specified error message, time-out interval, callback method, and user-provided state.</summary><returns>A reference to the asynchronous <see cref="!:Overload:System.Activities.WorkflowApplication.BeginTerminate"/> operation.</returns><param name="reason">The reason for terminating the workflow instance.</param><param name="timeout">The interval in which the <see cref="!:Overload:System.Activities.WorkflowApplication.BeginTerminate"/> operation must complete before the operation is canceled and a <see cref="T:System.TimeoutException"/> is thrown.</param><param name="callback">The method to be called when the <see cref="!:Overload:System.Activities.WorkflowApplication.BeginTerminate"/> operation has completed.</param><param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
        </member>
        <member name="M:Ninject.Extensions.Wf.IWorkflowApplication.BeginTerminate(System.Exception,System.TimeSpan,System.AsyncCallback,System.Object)">
            <summary>Terminates a workflow instance asynchronously using the specified exception, time-out interval, callback method, and user-provided state.</summary><returns>A reference to the current <see cref="!:Overload:System.Activities.WorkflowApplication.BeginTerminate"/> operation.</returns><param name="reason">The reason for terminating the workflow instance.</param><param name="timeout">The interval in which the <see cref="!:Overload:System.Activities.WorkflowApplication.BeginTerminate"/> operation must complete before the operation is canceled and a <see cref="T:System.TimeoutException"/> is thrown.</param><param name="callback">The method to be called when the <see cref="!:Overload:System.Activities.WorkflowApplication.BeginTerminate"/> operation has completed.</param><param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
        </member>
        <member name="M:Ninject.Extensions.Wf.IWorkflowApplication.BeginRun(System.AsyncCallback,System.Object)">
            <summary>Starts or resumes a workflow instance asynchronously using the specified callback method and user-provided state.</summary><returns>A reference to the asynchronous run operation.</returns><param name="callback">The method to be called when the resume operation has completed.</param><param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
        </member>
        <member name="M:Ninject.Extensions.Wf.IWorkflowApplication.BeginRun(System.TimeSpan,System.AsyncCallback,System.Object)">
            <summary>Starts or resumes a workflow instance asynchronously using the specified time-out interval, callback method, and user-provided state.</summary><returns>A reference to the asynchronous run operation.</returns><param name="timeout">The interval in which the resume operation must complete before the operation is canceled and a <see cref="T:System.TimeoutException"/> is thrown.</param><param name="callback">The method to be called when the resume operation has completed.</param><param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
        </member>
        <member name="M:Ninject.Extensions.Wf.IWorkflowApplication.BeginResumeBookmark(System.String,System.Object,System.AsyncCallback,System.Object)">
            <summary>Initiates an asynchronous operation to resume the bookmark with the specified name, using the specified value, callback method, and state. The bookmark to be resumed is previously created by an activity within the workflow instance.</summary><returns>The result of the bookmark resumption operation.</returns><param name="bookmarkName">The name of the bookmark to be resumed.</param><param name="value">An object passed as a parameter to the method that is invoked when the bookmark resumes.</param><param name="callback">The method that is called when the asynchronous operation completes.</param><param name="state">The state of execution of a workflow that was preserved by the calling thread before an asynchronous operation began.</param>
        </member>
        <member name="M:Ninject.Extensions.Wf.IWorkflowApplication.BeginResumeBookmark(System.String,System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
            <summary>Initiates an asynchronous operation to resume the bookmark with the specified name, using the specified value, time-out interval, callback method, and state. The bookmark to be resumed is previously created by an activity within the workflow instance.</summary><returns>The result of the bookmark resumption operation.</returns><param name="bookmarkName">The name of the bookmark to be resumed.</param><param name="value">An object passed as a parameter to the method that is invoked when the bookmark resumes.</param><param name="timeout">The time interval during which the bookmark must be resumed.</param><param name="callback">The method that is called when the asynchronous operation completes.</param><param name="state">The state of execution of a workflow that was saved by the calling thread before an asynchronous operation began.</param>
        </member>
        <member name="M:Ninject.Extensions.Wf.IWorkflowApplication.BeginResumeBookmark(System.Activities.Bookmark,System.Object,System.AsyncCallback,System.Object)">
            <summary>Initiates an operation to resume a bookmark using the specified value, callback method, and state.</summary><returns>A reference to the asynchronous bookmark resume operation.</returns><param name="bookmark">The bookmark to resume.</param><param name="value">An object passed as a parameter to the method that is invoked when the bookmark resumes.</param><param name="callback">The method to be called when the resume operation has completed.</param><param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
        </member>
        <member name="M:Ninject.Extensions.Wf.IWorkflowApplication.BeginResumeBookmark(System.Activities.Bookmark,System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
            <summary>Initiates an operation to resume a bookmark using the specified value, time-out interval, callback method, and state.</summary><returns>A reference to the asynchronous bookmark resume operation.</returns><param name="bookmark">The bookmark to resume.</param><param name="value">An object passed as a parameter to the method that is invoked when the bookmark resumes.</param><param name="timeout">The interval in which the resume operation must complete before the operation is canceled and a <see cref="T:System.TimeoutException"/> is thrown.</param><param name="callback">The method to be called when the resume operation has completed.</param><param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
        </member>
        <member name="P:Ninject.Extensions.Wf.IWorkflowApplication.Unloaded">
            <summary>Gets or sets the <see cref="T:System.Action`1"/> that is invoked when the current workflow unloads.</summary><returns>An action that is invoked when a workflow instance is unloaded.</returns>
            <remarks>Underlying event arguments are wrapped for testing purpose.</remarks>
        </member>
        <member name="P:Ninject.Extensions.Wf.IWorkflowApplication.PersistableIdle">
            <summary>Gets or sets the <see cref="T:System.Activities.ActivityFunc"/> that is invoked when the current workflow instance is idle and can be persisted.</summary><returns>The <see cref="T:System.Activities.ActivityFunc"/> that is invoked when the current workflow instance is idle and can be persisted.</returns>
            <remarks>Underlying event arguments are wrapped for testing purpose.</remarks>
        </member>
        <member name="P:Ninject.Extensions.Wf.IWorkflowApplication.OnUnhandledException">
            <summary>Gets or sets the <see cref="T:System.Func`2"/> that is invoked when the current workflow instance encounters an unhandled exception. </summary><returns>The delegate that is invoked when a workflow instance encounters an unhandled exception.</returns>
            <remarks>Underlying event arguments are wrapped for testing purpose.</remarks>
        </member>
        <member name="P:Ninject.Extensions.Wf.IWorkflowApplication.InstanceStore">
            <summary>Gets or sets an object that provides access to the persisted state of the current instance of the workflow application.</summary><returns>An instance store.</returns>
        </member>
        <member name="P:Ninject.Extensions.Wf.IWorkflowApplication.Idle">
            <summary>Gets or sets the <see cref="T:System.Action`1"/> that is invoked when the current workflow instance becomes idle.</summary><returns>An action that executes when a workflow instance becomes idle.</returns>
            <remarks>Underlying event arguments are wrapped for testing purpose.</remarks>
        </member>
        <member name="P:Ninject.Extensions.Wf.IWorkflowApplication.Id">
            <summary>Gets the 128-bit GUID identifier of the current workflow application instance.</summary><returns>A 128-bit GUID identifier.</returns>
        </member>
        <member name="P:Ninject.Extensions.Wf.IWorkflowApplication.Completed">
            <summary>Gets or sets the <see cref="T:System.Action`1"/> that is invoked when the workflow instance completes.</summary><returns>An action that is invoked when the workflow instance is complete.</returns>
            <remarks>Underlying event arguments are wrapped for testing purpose.</remarks>
        </member>
        <member name="P:Ninject.Extensions.Wf.IWorkflowApplication.Aborted">
            <summary>Gets or sets the <see cref="T:System.Action`1"/> that is invoked when the workflow instance is aborted.</summary><returns>The action that is invoked when the workflow instance is aborted.</returns>
            <remarks>Underlying event arguments are wrapped for testing purpose.</remarks>
        </member>
        <member name="T:Ninject.Extensions.Wf.IWorkflowInvoker">
            <summary>
            Interface definition for the workflow invoker.
            </summary>
        </member>
        <member name="M:Ninject.Extensions.Wf.IWorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)">
            <summary>Invokes a workflow asynchronously with the specified <see cref="T:System.Collections.Generic.IDictionary`2"/> of input parameters, the specified time-out interval, and a unique identifier.</summary><param name="inputs">The dictionary of input parameters to the workflow, keyed by argument name.</param><param name="timeout">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException"/> is thrown.</param><param name="userState">A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</param>
        </member>
        <member name="M:Ninject.Extensions.Wf.IWorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
            <summary>Invokes a workflow asynchronously using the specified <see cref="T:System.Collections.Generic.IDictionary`2"/> of input parameters and a unique identifier.</summary><param name="inputs">The dictionary of input parameters to the workflow, keyed by argument name.</param><param name="userState">A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</param>
        </member>
        <member name="M:Ninject.Extensions.Wf.IWorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
            <summary>Invokes a workflow asynchronously with the specified <see cref="T:System.Collections.Generic.IDictionary`2"/> of input parameters and the specified time-out interval.</summary><param name="inputs">The dictionary of input parameters to the workflow, keyed by argument name.</param><param name="timeout">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException"/> is thrown.</param>
        </member>
        <member name="M:Ninject.Extensions.Wf.IWorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Invokes a workflow asynchronously using the specified <see cref="T:System.Collections.Generic.IDictionary`2"/> of input parameters.</summary><param name="inputs">The dictionary of input parameters to the workflow, keyed by argument name.</param>
        </member>
        <member name="M:Ninject.Extensions.Wf.IWorkflowInvoker.InvokeAsync(System.TimeSpan,System.Object)">
            <summary>Invokes a workflow asynchronously with the specified time-out interval and a unique identifier.</summary><param name="timeout">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException"/> is thrown.</param><param name="userState">A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</param>
        </member>
        <member name="M:Ninject.Extensions.Wf.IWorkflowInvoker.InvokeAsync(System.TimeSpan)">
            <summary>Invokes a workflow asynchronously with the specified time-out interval.</summary><param name="timeout">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException"/> is thrown.</param>
        </member>
        <member name="M:Ninject.Extensions.Wf.IWorkflowInvoker.InvokeAsync">
            <summary>Invokes a workflow asynchronously.</summary>
        </member>
        <member name="M:Ninject.Extensions.Wf.IWorkflowInvoker.Initialize(System.Activities.Activity)">
            <summary>
            Initializes the invoker with the specified workflow definition.
            </summary>
            <param name="workflowDefinition">The workflow definition.</param>
        </member>
        <member name="M:Ninject.Extensions.Wf.IWorkflowInvoker.Invoke">
            <summary>Invokes the activity that is passed to the <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)"/> constructor synchronously.</summary><returns>A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument"/> and <see cref="T:System.Activities.InOutArgument"/> values keyed by argument name that represent the outputs of the workflow.</returns>
        </member>
        <member name="M:Ninject.Extensions.Wf.IWorkflowInvoker.Invoke(System.TimeSpan)">
            <summary>Invokes a workflow synchronously with the specified time-out interval.</summary><returns>A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument"/> and <see cref="T:System.Activities.InOutArgument"/> values keyed by argument name that represent the outputs of the workflow.</returns><param name="timeout">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException"/> is thrown.</param>
        </member>
        <member name="M:Ninject.Extensions.Wf.IWorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>Invokes the activity passed to the <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)"/> constructor synchronously with the specified <see cref="T:System.Collections.Generic.IDictionary`2"/> of input parameters.</summary><returns>A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument"/> and <see cref="T:System.Activities.InOutArgument"/> values keyed by argument name that represent the outputs of the workflow.</returns><param name="inputs">The dictionary of input parameters to the workflow, keyed by argument name.</param>
        </member>
        <member name="M:Ninject.Extensions.Wf.IWorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
            <summary>Invokes the activity passed to the <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)"/> constructor synchronously with the specified <see cref="T:System.Collections.Generic.IDictionary`2"/> of input parameters and the specified time-out interval.</summary><returns>A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument"/> and <see cref="T:System.Activities.InOutArgument"/> values keyed by argument name that represent the outputs of the workflow.</returns><param name="inputs">The dictionary of input parameters to the workflow, keyed by argument name.</param><param name="timeout">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException"/> is thrown.</param>
        </member>
        <member name="M:Ninject.Extensions.Wf.IWorkflowInvoker.EndInvoke(System.IAsyncResult)">
            <summary>Returns the results of a workflow that was invoked using one of the <see cref="!:Overload:System.Activities.WorkflowInvoker.BeginInvoke"/> overloads.</summary><returns>A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument"/> and <see cref="T:System.Activities.InOutArgument"/> values keyed by argument name that represent the outputs of the workflow.</returns><param name="result">The <see cref="T:System.IAsyncResult"/> that references the <see cref="!:Overload:System.Activities.WorkflowInvoker.BeginInvoke"/> operation that started the workflow.</param>
        </member>
        <member name="M:Ninject.Extensions.Wf.IWorkflowInvoker.CancelAsync(System.Object)">
            <summary>Attempts to cancel the workflow that was invoked with the specified <paramref name="userState"/>.</summary><param name="userState">The token for the workflow to cancel.</param>
        </member>
        <member name="M:Ninject.Extensions.Wf.IWorkflowInvoker.BeginInvoke(System.AsyncCallback,System.Object)">
            <summary>Invokes a workflow asynchronously using the specified <see cref="T:System.AsyncCallback"/> and user-provided state.</summary><returns>A reference to the asynchronous invoke operation.</returns><param name="callback">The method to be called when the workflow has completed.</param><param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
        </member>
        <member name="M:Ninject.Extensions.Wf.IWorkflowInvoker.BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)">
            <summary>Invokes a workflow asynchronously using the specified time-out interval, <see cref="T:System.AsyncCallback"/>, and user-provided state.</summary><returns>A reference to the asynchronous invoke operation.</returns><param name="timeout">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException"/> is thrown.</param><param name="callback">The method to be called when the workflow has completed.</param><param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
        </member>
        <member name="M:Ninject.Extensions.Wf.IWorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)">
            <summary>Invokes a workflow asynchronously using the specified <see cref="T:System.Collections.Generic.IDictionary`2"/> of input parameters, <see cref="T:System.AsyncCallback"/>, and user-provided state.</summary><returns>A reference to the asynchronous invoke operation.</returns><param name="inputs">The dictionary of input parameters to the workflow, keyed by argument name.</param><param name="callback">The method to be called when the workflow has completed.</param><param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
        </member>
        <member name="M:Ninject.Extensions.Wf.IWorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)">
            <summary>Invokes a workflow asynchronously using the specified <see cref="T:System.Collections.Generic.IDictionary`2"/> of input parameters, time-out interval, <see cref="T:System.AsyncCallback"/>, and user-provided state.</summary><returns>A reference to the asynchronous invoke operation.</returns><param name="inputs">The dictionary of input parameters to the workflow, keyed by argument name.</param><param name="timeout">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException"/> is thrown.</param><param name="callback">The method to be called when the workflow has completed.</param><param name="state">An optional application-specific object that contains information about the asynchronous operation.</param>
        </member>
        <member name="T:Ninject.Extensions.Wf.NinjectWorkflowApplication">
            <summary>
            Wraps the <see cref="T:System.Activities.WorkflowApplication"/>.
            </summary>
        </member>
        <member name="M:Ninject.Extensions.Wf.NinjectWorkflowApplication.#ctor(Ninject.IKernel)">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Extensions.Wf.NinjectWorkflowApplication"/> class.
            </summary>
            <param name="kernel">The kernel.</param>
        </member>
        <member name="M:Ninject.Extensions.Wf.NinjectWorkflowApplication.Initialize(System.Activities.Activity)">
            <inheritdoc />
        </member>
        <member name="M:Ninject.Extensions.Wf.NinjectWorkflowApplication.Initialize(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="M:Ninject.Extensions.Wf.NinjectWorkflowApplication.Unload">
            <inheritdoc />
        </member>
        <member name="M:Ninject.Extensions.Wf.NinjectWorkflowApplication.Unload(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:Ninject.Extensions.Wf.NinjectWorkflowApplication.Terminate(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Ninject.Extensions.Wf.NinjectWorkflowApplication.Terminate(System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:Ninject.Extensions.Wf.NinjectWorkflowApplication.Terminate(System.String,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:Ninject.Extensions.Wf.NinjectWorkflowApplication.Terminate(System.Exception,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:Ninject.Extensions.Wf.NinjectWorkflowApplication.Run">
            <inheritdoc />
        </member>
        <member name="M:Ninject.Extensions.Wf.NinjectWorkflowApplication.Run(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:Ninject.Extensions.Wf.NinjectWorkflowApplication.ResumeBookmark(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Ninject.Extensions.Wf.NinjectWorkflowApplication.ResumeBookmark(System.Activities.Bookmark,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Ninject.Extensions.Wf.NinjectWorkflowApplication.ResumeBookmark(System.String,System.Object,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:Ninject.Extensions.Wf.NinjectWorkflowApplication.ResumeBookmark(System.Activities.Bookmark,System.Object,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:Ninject.Extensions.Wf.NinjectWorkflowApplication.Persist">
            <inheritdoc />
        </member>
        <member name="M:Ninject.Extensions.Wf.NinjectWorkflowApplication.Persist(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:Ninject.Extensions.Wf.NinjectWorkflowApplication.LoadRunnableInstance">
            <inheritdoc />
        </member>
        <member name="M:Ninject.Extensions.Wf.NinjectWorkflowApplication.LoadRunnableInstance(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:Ninject.Extensions.Wf.NinjectWorkflowApplication.Load(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Ninject.Extensions.Wf.NinjectWorkflowApplication.Load(System.Guid,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:Ninject.Extensions.Wf.NinjectWorkflowApplication.GetBookmarks">
            <inheritdoc />
        </member>
        <member name="M:Ninject.Extensions.Wf.NinjectWorkflowApplication.GetBookmarks(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:Ninject.Extensions.Wf.NinjectWorkflowApplication.EndUnload(System.IAsyncResult)">
            <inheritdoc />
        </member>
        <member name="M:Ninject.Extensions.Wf.NinjectWorkflowApplication.EndTerminate(System.IAsyncResult)">
            <inheritdoc />
        </member>
        <member name="M:Ninject.Extensions.Wf.NinjectWorkflowApplication.EndRun(System.IAsyncResult)">
            <inheritdoc />
        </member>
        <member name="M:Ninject.Extensions.Wf.NinjectWorkflowApplication.EndResumeBookmark(System.IAsyncResult)">
            <inheritdoc />
        </member>
        <member name="M:Ninject.Extensions.Wf.NinjectWorkflowApplication.EndPersist(System.IAsyncResult)">
            <inheritdoc />
        </member>
        <member name="M:Ninject.Extensions.Wf.NinjectWorkflowApplication.EndLoadRunnableInstance(System.IAsyncResult)">
            <inheritdoc />
        </member>
        <member name="M:Ninject.Extensions.Wf.NinjectWorkflowApplication.EndLoad(System.IAsyncResult)">
            <inheritdoc />
        </member>
        <member name="M:Ninject.Extensions.Wf.NinjectWorkflowApplication.EndCancel(System.IAsyncResult)">
            <inheritdoc />
        </member>
        <member name="M:Ninject.Extensions.Wf.NinjectWorkflowApplication.Cancel">
            <inheritdoc />
        </member>
        <member name="M:Ninject.Extensions.Wf.NinjectWorkflowApplication.Cancel(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:Ninject.Extensions.Wf.NinjectWorkflowApplication.BeginUnload(System.AsyncCallback,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Ninject.Extensions.Wf.NinjectWorkflowApplication.BeginUnload(System.TimeSpan,System.AsyncCallback,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Ninject.Extensions.Wf.NinjectWorkflowApplication.BeginTerminate(System.String,System.AsyncCallback,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Ninject.Extensions.Wf.NinjectWorkflowApplication.BeginTerminate(System.Exception,System.AsyncCallback,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Ninject.Extensions.Wf.NinjectWorkflowApplication.BeginTerminate(System.String,System.TimeSpan,System.AsyncCallback,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Ninject.Extensions.Wf.NinjectWorkflowApplication.BeginTerminate(System.Exception,System.TimeSpan,System.AsyncCallback,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Ninject.Extensions.Wf.NinjectWorkflowApplication.BeginRun(System.AsyncCallback,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Ninject.Extensions.Wf.NinjectWorkflowApplication.BeginRun(System.TimeSpan,System.AsyncCallback,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Ninject.Extensions.Wf.NinjectWorkflowApplication.BeginResumeBookmark(System.String,System.Object,System.AsyncCallback,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Ninject.Extensions.Wf.NinjectWorkflowApplication.BeginResumeBookmark(System.String,System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Ninject.Extensions.Wf.NinjectWorkflowApplication.BeginResumeBookmark(System.Activities.Bookmark,System.Object,System.AsyncCallback,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Ninject.Extensions.Wf.NinjectWorkflowApplication.BeginResumeBookmark(System.Activities.Bookmark,System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Ninject.Extensions.Wf.NinjectWorkflowApplication.AddExtensions">
            <summary>
            Adds the extensions.
            </summary>
        </member>
        <member name="P:Ninject.Extensions.Wf.NinjectWorkflowApplication.Extensions">
            <inheritdoc />
        </member>
        <member name="P:Ninject.Extensions.Wf.NinjectWorkflowApplication.Application">
            <summary>
            Gets or sets the application.
            </summary>
            <value>The application.</value>
        </member>
        <member name="P:Ninject.Extensions.Wf.NinjectWorkflowApplication.Aborted">
            <inheritdoc />
        </member>
        <member name="P:Ninject.Extensions.Wf.NinjectWorkflowApplication.Unloaded">
            <inheritdoc />
        </member>
        <member name="P:Ninject.Extensions.Wf.NinjectWorkflowApplication.PersistableIdle">
            <inheritdoc />
        </member>
        <member name="P:Ninject.Extensions.Wf.NinjectWorkflowApplication.OnUnhandledException">
            <inheritdoc />
        </member>
        <member name="P:Ninject.Extensions.Wf.NinjectWorkflowApplication.InstanceStore">
            <inheritdoc />
        </member>
        <member name="P:Ninject.Extensions.Wf.NinjectWorkflowApplication.Idle">
            <inheritdoc />
        </member>
        <member name="P:Ninject.Extensions.Wf.NinjectWorkflowApplication.Id">
            <inheritdoc />
        </member>
        <member name="P:Ninject.Extensions.Wf.NinjectWorkflowApplication.Completed">
            <inheritdoc />
        </member>
        <member name="T:Ninject.Extensions.Wf.NinjectWorkflowInvoker">
            <summary>
            Wraps the <see cref="T:System.Activities.WorkflowInvoker"/>.
            </summary>
        </member>
        <member name="M:Ninject.Extensions.Wf.NinjectWorkflowInvoker.#ctor(Ninject.IKernel)">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Extensions.Wf.NinjectWorkflowInvoker"/> class.
            </summary>
            <param name="kernel">The kernel.</param>
        </member>
        <member name="M:Ninject.Extensions.Wf.NinjectWorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Ninject.Extensions.Wf.NinjectWorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Ninject.Extensions.Wf.NinjectWorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Ninject.Extensions.Wf.NinjectWorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <inheritdoc/>
        </member>
        <member name="M:Ninject.Extensions.Wf.NinjectWorkflowInvoker.InvokeAsync(System.TimeSpan,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Ninject.Extensions.Wf.NinjectWorkflowInvoker.InvokeAsync(System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Ninject.Extensions.Wf.NinjectWorkflowInvoker.InvokeAsync">
            <inheritdoc/>
        </member>
        <member name="M:Ninject.Extensions.Wf.NinjectWorkflowInvoker.Invoke">
            <inheritdoc/>
        </member>
        <member name="M:Ninject.Extensions.Wf.NinjectWorkflowInvoker.Invoke(System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Ninject.Extensions.Wf.NinjectWorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <inheritdoc/>
        </member>
        <member name="M:Ninject.Extensions.Wf.NinjectWorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:Ninject.Extensions.Wf.NinjectWorkflowInvoker.EndInvoke(System.IAsyncResult)">
            <inheritdoc/>
        </member>
        <member name="M:Ninject.Extensions.Wf.NinjectWorkflowInvoker.CancelAsync(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Ninject.Extensions.Wf.NinjectWorkflowInvoker.BeginInvoke(System.AsyncCallback,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Ninject.Extensions.Wf.NinjectWorkflowInvoker.BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Ninject.Extensions.Wf.NinjectWorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Ninject.Extensions.Wf.NinjectWorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Ninject.Extensions.Wf.NinjectWorkflowInvoker.Initialize(System.Activities.Activity)">
            <inheritdoc/>
        </member>
        <member name="P:Ninject.Extensions.Wf.NinjectWorkflowInvoker.Extensions">
            <inheritdoc/>
        </member>
        <member name="P:Ninject.Extensions.Wf.NinjectWorkflowInvoker.Invoker">
            <inheritdoc/>
        </member>
    </members>
</doc>
